/*
 * @(#)HTMLgenerator.java
 *
 * Copyright (c) 1998 by Trapezium Development LLC.  All Rights Reserved.
 *
 * The information in this file is the property of Trapezium Development LLC
 * and may be used only in accordance with the terms of the license granted
 * by Trapezium.
 *
 */
package com.trapezium.html;

import java.io.OutputStream;
import java.io.PrintWriter;

/**
 *  The HTMLgenerator is used to generate HTML text. 
 */
public class HTMLgenerator {
    PrintWriter os;
    int tableCount;

    /** Create a HTML generator for a specific output stream.
     *
     *  @param os the OutputStream HTML text destination
     */
    public HTMLgenerator( OutputStream os ) {
        this.os = new PrintWriter( os );
        bodyStarted = false;
        tableCount = 0;
    }
    
    public void header( String title ) {
        os.println( "<HTML>" );
        os.println( "<HEAD>" );
        os.println( "<TITLE>" + title + "</TITLE>" );
        os.println( "</HEAD>" );
    }
   
    /** Generate html for text with CENTER/LEFT/RIGHT, with an optional tag.
     *
     *  @param text the text to appear in the browser
     *  @param tag optional additional tag for the text (e.g. BOLD)
     */
    public void locateText( String text, String tag ) {
        if ( tag != null ) {
            os.println( "<" + tag + ">" );
        }
        os.println( text );
        if ( tag != null ) {
            os.println( "</" + tag + ">" );
        }
    }
    
    public void pText( String text ) {
        os.println( text );
    }
    
    /** Generate text for the start of a table.
     *
     *  @param title optional title for the table.
     *  @param titleTag tag that goes with title
     *  @param border optional border size of the table
     *  @param spacing optional spacing of table
     *  @param padding optional padding of table
     */
    public void startTable( String title, String titleTag, int border, int spacing, int padding ) {
        StringBuffer sb = new StringBuffer( "<TABLE" );
        if ( border > 0 ) {
            sb.append( " BORDER=" + border );
        }
        if ( spacing > 0 ) {
            sb.append( " CELLSPACING=" + spacing );
        }
        if ( padding > 0 ) {
            sb.append( " CELLPADDING=" + padding );
        }
        sb.append( " SUMMARY=\"generated by Chisel\"" );
        sb.append( ">" );
        os.println( sb );
        if ( title != null ) {
            os.println( "<CAPTION>" );
            if ( titleTag != null ) {
                os.println( "<" + titleTag + ">" );
            }
            os.println( title );
            if ( titleTag != null ) {
                os.println( "</" + titleTag + ">" );
            }
            os.println( "</CAPTION>" );
        }
        tableCount++;
    }

    /** Start a table row, no specific alignment */
    public void startRow() {
        startRow( null );
    }
    
    /** Start a table row with specific alignment
     *
     *  @param alignment HTML alignment tag, e.g. LEFT
     */
    public void startRow( String alignment ) {
        if ( alignment == null ) {
            os.println( "<TR>" );
        } else {
            os.println( "<TR ALIGN=" + alignment + ">" );
        }
    }
    
    public void endRow() {
        os.println( "</TR>" );
    }
    
    /** generate table entry text */
    public void genColumn( String text ) {
        os.println( "<TD>" + text + "</TD>" );
    }
    
    /** generate start of table entry, necessary when inserting tables in tables */
    public void genColumnStart( String text ) {
        os.println( "<TD>" + text );
    }
    
    /** generate end of table entry, necessary when inserting tables in tables */
    public void genColumnEnd() {
        os.println( "</TD>" );
    }
    
    public void columnHeader( String title, String alignment ) {
        if ( alignment != null ) {
            os.println( "<TH ALIGN=" + alignment + ">" );
        } else {
            os.println( "<TH>" );
        }
        os.println( "<DL>" );
        os.println( "<DT><B>" + title + "</B></DT>" );
        os.println( "</DL>" );
        os.println( "</TH>" );
    }
    
    boolean bodyStarted;
    public void startBody() {
        if ( !bodyStarted ) {
            os.println( "<BODY>" );
            bodyStarted = true;
        }
    }
    
    public void endTable() {
        if ( tableCount > 0 ) {
            os.println( "</TABLE>" );
            tableCount--;
        }
    }
    
    void endBody() {
        if ( bodyStarted ) {
            os.println( "</BODY>" );
            bodyStarted = false;
        }
    }
    
    public void terminate() {
        endTable();
        endBody();
        os.println( "</HTML>" );
        os.flush();
        os.close();
        os = null;
    }
}
