/*
	This simple extension of the java.awt.Frame class
	contains all the elements necessary to act as the
	main window of an application.
 */
package com.trapezium.humanoid;

import com.trapezium.bean.HumanBean;

import java.awt.*;
import java.io.*;

public class BeanManager extends Frame
{
        
    class BeanFilter implements FilenameFilter {
        public boolean accept( File dir, String name ) {
            return( name.indexOf( ".bean" ) > 0 );
        }
    }
    BeanFilter theBeanFilter;
    HumanBeanTracker theTracker;
    
	public BeanManager()
	{
		// This code is automatically generated by Visual Cafe when you add
		// components to the visual environment. It instantiates and initializes
		// the components. To modify the code, only use code syntax that matches
		// what Visual Cafe can generate, or Visual Cafe may be unable to back
		// parse your Java file into its visual environment.

		//{{INIT_CONTROLS
		setLayout(null);
		setVisible(false);
		setSize(405,420);
		openFileDialog1 = new java.awt.FileDialog(this);
		openFileDialog1.setMode(FileDialog.LOAD);
		openFileDialog1.setTitle("Open");
		//$$ openFileDialog1.move(60,372);
		Group1 = new CheckboxGroup();
		humanoid1 = new java.awt.Checkbox("(available)", Group1, false);
		humanoid1.setBounds(36,36,144,40);
		add(humanoid1);
		humanoid2 = new java.awt.Checkbox("(available)", Group1, false);
		humanoid2.setBounds(36,72,144,40);
		add(humanoid2);
		humanoid3 = new java.awt.Checkbox("(available)", Group1, false);
		humanoid3.setBounds(36,108,144,40);
		add(humanoid3);
		humanoid4 = new java.awt.Checkbox("(available)", Group1, false);
		humanoid4.setBounds(36,144,144,40);
		add(humanoid4);
		humanoid5 = new java.awt.Checkbox("(available)", Group1, false);
		humanoid5.setBounds(36,180,144,40);
		add(humanoid5);
		humanoid6 = new java.awt.Checkbox("(available)", Group1, false);
		humanoid6.setBounds(36,216,144,40);
		add(humanoid6);
		humanoid7 = new java.awt.Checkbox("(available)", Group1, false);
		humanoid7.setBounds(36,252,144,40);
		add(humanoid7);
		humanoid8 = new java.awt.Checkbox("(available)", Group1, false);
		humanoid8.setBounds(36,288,144,40);
		add(humanoid8);
		humanoid9 = new java.awt.Checkbox("(available)", Group1, false);
		humanoid9.setBounds(36,324,144,40);
		add(humanoid9);
		label1 = new java.awt.Label("Humanoids");
		label1.setBounds(24,0,100,40);
		label1.setFont(new Font("Dialog", Font.BOLD, 12));
		add(label1);
		label2 = new java.awt.Label("Behaviors");
		label2.setBounds(228,0,100,40);
		label2.setFont(new Font("Dialog", Font.BOLD, 12));
		add(label2);
		behavior1 = new java.awt.Checkbox("(available)");
		behavior1.setBounds(228,36,156,24);
		add(behavior1);
		behavior2 = new java.awt.Checkbox("(available)");
		behavior2.setBounds(228,60,156,24);
		add(behavior2);
		behavior3 = new java.awt.Checkbox("(available)");
		behavior3.setBounds(228,84,156,24);
		add(behavior3);
		behavior4 = new java.awt.Checkbox("(available)");
		behavior4.setBounds(228,108,156,24);
		add(behavior4);
		behavior5 = new java.awt.Checkbox("(available)");
		behavior5.setBounds(228,132,156,24);
		add(behavior5);
		behavior6 = new java.awt.Checkbox("(available)");
		behavior6.setBounds(228,156,156,24);
		add(behavior6);
		behavior7 = new java.awt.Checkbox("(available)");
		behavior7.setBounds(228,180,156,24);
		add(behavior7);
		behavior8 = new java.awt.Checkbox("(available)");
		behavior8.setBounds(228,204,156,24);
		add(behavior8);
		behavior9 = new java.awt.Checkbox("(available)");
		behavior9.setBounds(228,228,156,24);
		add(behavior9);
		behavior10 = new java.awt.Checkbox("(available)");
		behavior10.setBounds(228,252,156,24);
		add(behavior10);
		behavior11 = new java.awt.Checkbox("(available)");
		behavior11.setBounds(228,276,156,24);
		add(behavior11);
		behavior12 = new java.awt.Checkbox("(available)");
		behavior12.setBounds(228,300,156,24);
		add(behavior12);
		behavior13 = new java.awt.Checkbox("(available)");
		behavior13.setBounds(228,324,156,24);
		add(behavior13);
		behavior14 = new java.awt.Checkbox("(available)");
		behavior14.setBounds(228,348,156,24);
		add(behavior14);
		statusLabel = new java.awt.Label("");
		statusLabel.setBounds(36,396,300,28);
		statusLabel.setFont(new Font("Dialog", Font.BOLD, 12));
		add(statusLabel);
		setTitle("Human Bean Manager, version 1.0");
		//}}
		theTracker = new HumanBeanTracker();
        theTracker.addCheckboxH( humanoid1 );
        theTracker.addCheckboxH( humanoid2 );
        theTracker.addCheckboxH( humanoid3 );
        theTracker.addCheckboxH( humanoid4 );
        theTracker.addCheckboxH( humanoid5 );
        theTracker.addCheckboxH( humanoid6 );
        theTracker.addCheckboxH( humanoid7 );
        theTracker.addCheckboxH( humanoid8 );
        theTracker.addCheckboxH( humanoid9 );

		theBeanFilter = new BeanFilter();
		
		theTracker.addCheckboxB( behavior1 );
		theTracker.addCheckboxB( behavior2 );
		theTracker.addCheckboxB( behavior3 );
		theTracker.addCheckboxB( behavior4 );
		theTracker.addCheckboxB( behavior5 );
		theTracker.addCheckboxB( behavior6 );
		theTracker.addCheckboxB( behavior7 );
		theTracker.addCheckboxB( behavior8 );
		theTracker.addCheckboxB( behavior9 );
		theTracker.addCheckboxB( behavior10 );
		theTracker.addCheckboxB( behavior11 );
		theTracker.addCheckboxB( behavior12 );
		theTracker.addCheckboxB( behavior13 );
		theTracker.addCheckboxB( behavior14 );

		//{{INIT_MENUS
		mainMenuBar = new java.awt.MenuBar();
		menu1 = new java.awt.Menu("File");
		miOpen = new java.awt.MenuItem("Open Bean...");
		miOpen.setShortcut(new MenuShortcut(java.awt.event.KeyEvent.VK_O,false));
		menu1.add(miOpen);
		miSave = new java.awt.MenuItem("Save VRML");
		miSave.setShortcut(new MenuShortcut(java.awt.event.KeyEvent.VK_S,false));
		menu1.add(miSave);
		miSaveAs = new java.awt.MenuItem("Save VRML As...");
		menu1.add(miSaveAs);
		menu1.addSeparator();
		miExit = new java.awt.MenuItem("Exit");
		menu1.add(miExit);
		mainMenuBar.add(menu1);
		menu3 = new java.awt.Menu("Help");
		mainMenuBar.setHelpMenu(menu3);
		miAbout = new java.awt.MenuItem("About..");
		menu3.add(miAbout);
		mainMenuBar.add(menu3);
		setMenuBar(mainMenuBar);
		//$$ mainMenuBar.move(12,372);
		//}}

		//{{REGISTER_LISTENERS
		SymWindow aSymWindow = new SymWindow();
		this.addWindowListener(aSymWindow);
		SymAction lSymAction = new SymAction();
		miOpen.addActionListener(lSymAction);
		miAbout.addActionListener(lSymAction);
		miExit.addActionListener(lSymAction);
		SymItem lSymItem = new SymItem();
		humanoid1.addItemListener(lSymItem);
		humanoid2.addItemListener(lSymItem);
		humanoid3.addItemListener(lSymItem);
		humanoid4.addItemListener(lSymItem);
		humanoid5.addItemListener(lSymItem);
		humanoid6.addItemListener(lSymItem);
		humanoid7.addItemListener(lSymItem);
		humanoid8.addItemListener(lSymItem);
		humanoid9.addItemListener(lSymItem);
		behavior1.addItemListener(lSymItem);
		behavior2.addItemListener(lSymItem);
		behavior3.addItemListener(lSymItem);
		behavior4.addItemListener(lSymItem);
		behavior5.addItemListener(lSymItem);
		behavior6.addItemListener(lSymItem);
		behavior7.addItemListener(lSymItem);
		behavior8.addItemListener(lSymItem);
		behavior9.addItemListener(lSymItem);
		behavior10.addItemListener(lSymItem);
		behavior11.addItemListener(lSymItem);
		behavior12.addItemListener(lSymItem);
		behavior13.addItemListener(lSymItem);
		behavior14.addItemListener(lSymItem);
		miSave.addActionListener(lSymAction);
		//}}
	}

	public BeanManager(String title)
	{
		this();
		setTitle(title);
	}

    /**
     * Shows or hides the component depending on the boolean flag b.
     * @param b  if true, show the component; otherwise, hide the component.
     * @see java.awt.Component#isVisible
     */
    public void setVisible(boolean b)
	{
		if(b)
		{
			setLocation(50, 50);
		}
		super.setVisible(b);
	}

	static public void main(String args[])
	{
		(new BeanManager()).setVisible(true);
	}

	public void addNotify()
	{
		// Record the size of the window prior to calling parents addNotify.
		Dimension d = getSize();

		super.addNotify();

		if (fComponentsAdjusted)
			return;

		// Adjust components according to the insets
		setSize(insets().left + insets().right + d.width, insets().top + insets().bottom + d.height);
		Component components[] = getComponents();
		for (int i = 0; i < components.length; i++)
		{
			Point p = components[i].getLocation();
			p.translate(insets().left, insets().top);
			components[i].setLocation(p);
		}
		fComponentsAdjusted = true;
	}

	// Used for addNotify check.
	boolean fComponentsAdjusted = false;

	//{{DECLARE_CONTROLS
	java.awt.FileDialog openFileDialog1;
	java.awt.Checkbox humanoid1;
	CheckboxGroup Group1;
	java.awt.Checkbox humanoid2;
	java.awt.Checkbox humanoid3;
	java.awt.Checkbox humanoid4;
	java.awt.Checkbox humanoid5;
	java.awt.Checkbox humanoid6;
	java.awt.Checkbox humanoid7;
	java.awt.Checkbox humanoid8;
	java.awt.Checkbox humanoid9;
	java.awt.Label label1;
	java.awt.Label label2;
	java.awt.Checkbox behavior1;
	java.awt.Checkbox behavior2;
	java.awt.Checkbox behavior3;
	java.awt.Checkbox behavior4;
	java.awt.Checkbox behavior5;
	java.awt.Checkbox behavior6;
	java.awt.Checkbox behavior7;
	java.awt.Checkbox behavior8;
	java.awt.Checkbox behavior9;
	java.awt.Checkbox behavior10;
	java.awt.Checkbox behavior11;
	java.awt.Checkbox behavior12;
	java.awt.Checkbox behavior13;
	java.awt.Checkbox behavior14;
	java.awt.Label statusLabel;
	//}}

	//{{DECLARE_MENUS
	java.awt.MenuBar mainMenuBar;
	java.awt.Menu menu1;
	java.awt.MenuItem miOpen;
	java.awt.MenuItem miSave;
	java.awt.MenuItem miSaveAs;
	java.awt.MenuItem miExit;
	java.awt.Menu menu3;
	java.awt.MenuItem miAbout;
	//}}

	class SymWindow extends java.awt.event.WindowAdapter
	{
		public void windowClosing(java.awt.event.WindowEvent event)
		{
			Object object = event.getSource();
			if (object == BeanManager.this)
				BeanManager_WindowClosing(event);
		}
	}

	void BeanManager_WindowClosing(java.awt.event.WindowEvent event)
	{
		setVisible(false);	// hide the Frame
		dispose();			// free the system resources
		System.exit(0);		// close the application
	}

	class SymAction implements java.awt.event.ActionListener
	{
		public void actionPerformed(java.awt.event.ActionEvent event)
		{
			Object object = event.getSource();
			if (object == miOpen)
				miOpen_Action(event);
			else if (object == miAbout)
				miAbout_Action(event);
			else if (object == miExit)
				miExit_Action(event);
			else if (object == miSave)
				miSave_ActionPerformed(event);
		}
	}

	void miAbout_Action(java.awt.event.ActionEvent event)
	{
		//{{CONNECTION
		// Action from About Create and show as modal
		(new AboutDialog(this, true)).setVisible(true);
		//}}
	}

	void miExit_Action(java.awt.event.ActionEvent event)
	{
		//{{CONNECTION
		// Action from Exit Create and show as modal
		(new QuitDialog(this, true)).setVisible(true);
		//}}
	}

	void miOpen_Action(java.awt.event.ActionEvent event)
	{
		//{{CONNECTION
		// Action from Open... Show the OpenFileDialog
		int		defMode			= openFileDialog1.getMode();
		String	defTitle		= openFileDialog1.getTitle();
		String defDirectory	= openFileDialog1.getDirectory();
		String defFile			= openFileDialog1.getFile();

		openFileDialog1 = new java.awt.FileDialog(this, defTitle, defMode);
		openFileDialog1.setDirectory(defDirectory);
		openFileDialog1.setFile(defFile);
		openFileDialog1.setVisible(true);
		openFileDialog1.setFilenameFilter(theBeanFilter);
		//}}
		String result = openFileDialog1.getFile();
		String dir = openFileDialog1.getDirectory();
		if (( dir != null ) && ( result != null )) {
		    result = dir + result;
		    System.out.println( "Loading '" + result + "'" );
		    statusLabel.setText( "Loading '" + result + "' ..." );
		    try {
    		    HumanBean newBean = HumanBean.load( result );
    		    System.out.println( "calling saveBean" );
    		    theTracker.saveBean( newBean );
    		    System.out.println( "calling saveBehaviors" );
    		    theTracker.saveBehaviors( newBean );
    		    System.out.println( "calling updateBehaviors" );
    		    theTracker.updateBehaviors();
    		    System.out.println( "done." );
	    	    updateStatus();
	    	} catch ( Exception e ) {
	    	    e.printStackTrace();
	    	    statusLabel.setText( "Exception loading '" + result + "'" );
	    	}
		}
	}

	class SymItem implements java.awt.event.ItemListener
	{
		public void itemStateChanged(java.awt.event.ItemEvent event)
		{
			Object object = event.getSource();
			theTracker.updateHumanoidSelection( object );
			theTracker.updateBehaviorSelection( object );
		}
	}

	void miSave_ActionPerformed(java.awt.event.ActionEvent event)
	{
		// to do: code goes here.
		statusLabel.setText( "Saving '" + theTracker.getSaveName() + "'" );
		theTracker.saveHumanoidVRML();
		updateStatus();
	}
	
	void updateStatus() {
	    int nHumanoids = theTracker.getNumberHumanoids();
	    int nBehaviors = theTracker.getNumberBehaviors();
	    if (( nHumanoids == 1 ) && ( nBehaviors == 1 )) {
	        statusLabel.setText( "1 humanoid, 1 behavior" );
	    } else if (( nHumanoids == 1 ) && ( nBehaviors > 1 )) {
	        statusLabel.setText( "1 humanoid, " + nBehaviors + " behaviors" );
	    } else if (( nHumanoids > 1 ) && ( nBehaviors == 1 )) {
	        statusLabel.setText( nHumanoids + " humanoids, 1 behavior" );
	    } else {
	        statusLabel.setText( nHumanoids + " humanoids, " + nBehaviors + " behaviors" );
	    }
	}
}

